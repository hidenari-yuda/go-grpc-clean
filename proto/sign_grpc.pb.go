// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/sign.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignClient is the client API for Sign service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignClient interface {
	// Sends a greeting
	PutSignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*OkReply, error)
	// Sends another greeting
	PostSignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*OkReply, error)
}

type signClient struct {
	cc grpc.ClientConnInterface
}

func NewSignClient(cc grpc.ClientConnInterface) SignClient {
	return &signClient{cc}
}

func (c *signClient) PutSignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*OkReply, error) {
	out := new(OkReply)
	err := c.cc.Invoke(ctx, "/helloworld.Sign/PutSignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signClient) PostSignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*OkReply, error) {
	out := new(OkReply)
	err := c.cc.Invoke(ctx, "/helloworld.Sign/PostSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignServer is the server API for Sign service.
// All implementations must embed UnimplementedSignServer
// for forward compatibility
type SignServer interface {
	// Sends a greeting
	PutSignIn(context.Context, *SignInRequest) (*OkReply, error)
	// Sends another greeting
	PostSignUp(context.Context, *SignUpRequest) (*OkReply, error)
	mustEmbedUnimplementedSignServer()
}

// UnimplementedSignServer must be embedded to have forward compatible implementations.
type UnimplementedSignServer struct {
}

func (UnimplementedSignServer) PutSignIn(context.Context, *SignInRequest) (*OkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSignIn not implemented")
}
func (UnimplementedSignServer) PostSignUp(context.Context, *SignUpRequest) (*OkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSignUp not implemented")
}
func (UnimplementedSignServer) mustEmbedUnimplementedSignServer() {}

// UnsafeSignServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignServer will
// result in compilation errors.
type UnsafeSignServer interface {
	mustEmbedUnimplementedSignServer()
}

func RegisterSignServer(s grpc.ServiceRegistrar, srv SignServer) {
	s.RegisterService(&Sign_ServiceDesc, srv)
}

func _Sign_PutSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServer).PutSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Sign/PutSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServer).PutSignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sign_PostSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServer).PostSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Sign/PostSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServer).PostSignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sign_ServiceDesc is the grpc.ServiceDesc for Sign service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sign_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Sign",
	HandlerType: (*SignServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutSignIn",
			Handler:    _Sign_PutSignIn_Handler,
		},
		{
			MethodName: "PostSignUp",
			Handler:    _Sign_PostSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sign.proto",
}
