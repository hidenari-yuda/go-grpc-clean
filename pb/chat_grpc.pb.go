// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatGroupServiceClient is the client API for ChatGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGroupServiceClient interface {
	Create(ctx context.Context, in *ChatGroup, opts ...grpc.CallOption) (*ChatGroup, error)
	Update(ctx context.Context, in *ChatGroup, opts ...grpc.CallOption) (*ChatBoolResponse, error)
	Delete(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*ChatBoolResponse, error)
	// Get
	GetById(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*ChatGroup, error)
	GetListByUserId(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*ChatGroupList, error)
}

type chatGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGroupServiceClient(cc grpc.ClientConnInterface) ChatGroupServiceClient {
	return &chatGroupServiceClient{cc}
}

func (c *chatGroupServiceClient) Create(ctx context.Context, in *ChatGroup, opts ...grpc.CallOption) (*ChatGroup, error) {
	out := new(ChatGroup)
	err := c.cc.Invoke(ctx, "/chat.ChatGroupService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGroupServiceClient) Update(ctx context.Context, in *ChatGroup, opts ...grpc.CallOption) (*ChatBoolResponse, error) {
	out := new(ChatBoolResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGroupService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGroupServiceClient) Delete(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*ChatBoolResponse, error) {
	out := new(ChatBoolResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatGroupService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGroupServiceClient) GetById(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*ChatGroup, error) {
	out := new(ChatGroup)
	err := c.cc.Invoke(ctx, "/chat.ChatGroupService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGroupServiceClient) GetListByUserId(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*ChatGroupList, error) {
	out := new(ChatGroupList)
	err := c.cc.Invoke(ctx, "/chat.ChatGroupService/GetListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatGroupServiceServer is the server API for ChatGroupService service.
// All implementations should embed UnimplementedChatGroupServiceServer
// for forward compatibility
type ChatGroupServiceServer interface {
	Create(context.Context, *ChatGroup) (*ChatGroup, error)
	Update(context.Context, *ChatGroup) (*ChatBoolResponse, error)
	Delete(context.Context, *ChatIdRequest) (*ChatBoolResponse, error)
	// Get
	GetById(context.Context, *ChatIdRequest) (*ChatGroup, error)
	GetListByUserId(context.Context, *ChatIdRequest) (*ChatGroupList, error)
}

// UnimplementedChatGroupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatGroupServiceServer struct {
}

func (UnimplementedChatGroupServiceServer) Create(context.Context, *ChatGroup) (*ChatGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChatGroupServiceServer) Update(context.Context, *ChatGroup) (*ChatBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedChatGroupServiceServer) Delete(context.Context, *ChatIdRequest) (*ChatBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChatGroupServiceServer) GetById(context.Context, *ChatIdRequest) (*ChatGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedChatGroupServiceServer) GetListByUserId(context.Context, *ChatIdRequest) (*ChatGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByUserId not implemented")
}

// UnsafeChatGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGroupServiceServer will
// result in compilation errors.
type UnsafeChatGroupServiceServer interface {
	mustEmbedUnimplementedChatGroupServiceServer()
}

func RegisterChatGroupServiceServer(s grpc.ServiceRegistrar, srv ChatGroupServiceServer) {
	s.RegisterService(&ChatGroupService_ServiceDesc, srv)
}

func _ChatGroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGroupService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGroupServiceServer).Create(ctx, req.(*ChatGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGroupService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGroupServiceServer).Update(ctx, req.(*ChatGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGroupService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGroupServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGroupService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGroupServiceServer).Delete(ctx, req.(*ChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGroupService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGroupServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGroupService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGroupServiceServer).GetById(ctx, req.(*ChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGroupService_GetListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGroupServiceServer).GetListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatGroupService/GetListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGroupServiceServer).GetListByUserId(ctx, req.(*ChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatGroupService_ServiceDesc is the grpc.ServiceDesc for ChatGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatGroupService",
	HandlerType: (*ChatGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ChatGroupService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ChatGroupService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChatGroupService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ChatGroupService_GetById_Handler,
		},
		{
			MethodName: "GetListByUserId",
			Handler:    _ChatGroupService_GetListByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Create(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*Chat, error)
	Update(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*ChatBoolResponse, error)
	Delete(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*ChatBoolResponse, error)
	// Get
	GetById(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*Chat, error)
	GetListByGroupId(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*ChatList, error)
	GetStream(ctx context.Context, in *GetChatStreamRequest, opts ...grpc.CallOption) (ChatService_GetStreamClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Create(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Update(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*ChatBoolResponse, error) {
	out := new(ChatBoolResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Delete(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*ChatBoolResponse, error) {
	out := new(ChatBoolResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetById(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/chat.ChatService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetListByGroupId(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*ChatList, error) {
	out := new(ChatList)
	err := c.cc.Invoke(ctx, "/chat.ChatService/GetListByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetStream(ctx context.Context, in *GetChatStreamRequest, opts ...grpc.CallOption) (ChatService_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/chat.ChatService/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_GetStreamClient interface {
	Recv() (*Chat, error)
	grpc.ClientStream
}

type chatServiceGetStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceGetStreamClient) Recv() (*Chat, error) {
	m := new(Chat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations should embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	Create(context.Context, *Chat) (*Chat, error)
	Update(context.Context, *Chat) (*ChatBoolResponse, error)
	Delete(context.Context, *ChatIdRequest) (*ChatBoolResponse, error)
	// Get
	GetById(context.Context, *ChatIdRequest) (*Chat, error)
	GetListByGroupId(context.Context, *ChatIdRequest) (*ChatList, error)
	GetStream(*GetChatStreamRequest, ChatService_GetStreamServer) error
}

// UnimplementedChatServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Create(context.Context, *Chat) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChatServiceServer) Update(context.Context, *Chat) (*ChatBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedChatServiceServer) Delete(context.Context, *ChatIdRequest) (*ChatBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChatServiceServer) GetById(context.Context, *ChatIdRequest) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedChatServiceServer) GetListByGroupId(context.Context, *ChatIdRequest) (*ChatList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByGroupId not implemented")
}
func (UnimplementedChatServiceServer) GetStream(*GetChatStreamRequest, ChatService_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Create(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Update(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Delete(ctx, req.(*ChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetById(ctx, req.(*ChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetListByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetListByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/GetListByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetListByGroupId(ctx, req.(*ChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChatStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).GetStream(m, &chatServiceGetStreamServer{stream})
}

type ChatService_GetStreamServer interface {
	Send(*Chat) error
	grpc.ServerStream
}

type chatServiceGetStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceGetStreamServer) Send(m *Chat) error {
	return x.ServerStream.SendMsg(m)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ChatService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ChatService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChatService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ChatService_GetById_Handler,
		},
		{
			MethodName: "GetListByGroupId",
			Handler:    _ChatService_GetListByGroupId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _ChatService_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}
