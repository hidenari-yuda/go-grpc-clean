// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: script.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScriptServiceClient is the client API for ScriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScriptServiceClient interface {
	Create(ctx context.Context, in *Script, opts ...grpc.CallOption) (*Script, error)
	CreateHeadlineByKeyword(ctx context.Context, in *ScriptStringRequest, opts ...grpc.CallOption) (*Script, error)
	CreateContentByKeyword(ctx context.Context, in *ScriptStringRequest, opts ...grpc.CallOption) (*Script, error)
	Update(ctx context.Context, in *Script, opts ...grpc.CallOption) (*Script, error)
	// Get
	GetById(ctx context.Context, in *ScriptIdRequest, opts ...grpc.CallOption) (*Script, error)
	GetListByMediaId(ctx context.Context, in *ScriptIdRequest, opts ...grpc.CallOption) (*ScriptList, error)
}

type scriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScriptServiceClient(cc grpc.ClientConnInterface) ScriptServiceClient {
	return &scriptServiceClient{cc}
}

func (c *scriptServiceClient) Create(ctx context.Context, in *Script, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/script.ScriptService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) CreateHeadlineByKeyword(ctx context.Context, in *ScriptStringRequest, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/script.ScriptService/CreateHeadlineByKeyword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) CreateContentByKeyword(ctx context.Context, in *ScriptStringRequest, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/script.ScriptService/CreateContentByKeyword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) Update(ctx context.Context, in *Script, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/script.ScriptService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) GetById(ctx context.Context, in *ScriptIdRequest, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/script.ScriptService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) GetListByMediaId(ctx context.Context, in *ScriptIdRequest, opts ...grpc.CallOption) (*ScriptList, error) {
	out := new(ScriptList)
	err := c.cc.Invoke(ctx, "/script.ScriptService/GetListByMediaId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScriptServiceServer is the server API for ScriptService service.
// All implementations should embed UnimplementedScriptServiceServer
// for forward compatibility
type ScriptServiceServer interface {
	Create(context.Context, *Script) (*Script, error)
	CreateHeadlineByKeyword(context.Context, *ScriptStringRequest) (*Script, error)
	CreateContentByKeyword(context.Context, *ScriptStringRequest) (*Script, error)
	Update(context.Context, *Script) (*Script, error)
	// Get
	GetById(context.Context, *ScriptIdRequest) (*Script, error)
	GetListByMediaId(context.Context, *ScriptIdRequest) (*ScriptList, error)
}

// UnimplementedScriptServiceServer should be embedded to have forward compatible implementations.
type UnimplementedScriptServiceServer struct {
}

func (UnimplementedScriptServiceServer) Create(context.Context, *Script) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedScriptServiceServer) CreateHeadlineByKeyword(context.Context, *ScriptStringRequest) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHeadlineByKeyword not implemented")
}
func (UnimplementedScriptServiceServer) CreateContentByKeyword(context.Context, *ScriptStringRequest) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContentByKeyword not implemented")
}
func (UnimplementedScriptServiceServer) Update(context.Context, *Script) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedScriptServiceServer) GetById(context.Context, *ScriptIdRequest) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedScriptServiceServer) GetListByMediaId(context.Context, *ScriptIdRequest) (*ScriptList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByMediaId not implemented")
}

// UnsafeScriptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScriptServiceServer will
// result in compilation errors.
type UnsafeScriptServiceServer interface {
	mustEmbedUnimplementedScriptServiceServer()
}

func RegisterScriptServiceServer(s grpc.ServiceRegistrar, srv ScriptServiceServer) {
	s.RegisterService(&ScriptService_ServiceDesc, srv)
}

func _ScriptService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Script)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/script.ScriptService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).Create(ctx, req.(*Script))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_CreateHeadlineByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).CreateHeadlineByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/script.ScriptService/CreateHeadlineByKeyword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).CreateHeadlineByKeyword(ctx, req.(*ScriptStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_CreateContentByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).CreateContentByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/script.ScriptService/CreateContentByKeyword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).CreateContentByKeyword(ctx, req.(*ScriptStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Script)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/script.ScriptService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).Update(ctx, req.(*Script))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/script.ScriptService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).GetById(ctx, req.(*ScriptIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_GetListByMediaId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).GetListByMediaId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/script.ScriptService/GetListByMediaId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).GetListByMediaId(ctx, req.(*ScriptIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScriptService_ServiceDesc is the grpc.ServiceDesc for ScriptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScriptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "script.ScriptService",
	HandlerType: (*ScriptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ScriptService_Create_Handler,
		},
		{
			MethodName: "CreateHeadlineByKeyword",
			Handler:    _ScriptService_CreateHeadlineByKeyword_Handler,
		},
		{
			MethodName: "CreateContentByKeyword",
			Handler:    _ScriptService_CreateContentByKeyword_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ScriptService_Update_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ScriptService_GetById_Handler,
		},
		{
			MethodName: "GetListByMediaId",
			Handler:    _ScriptService_GetListByMediaId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "script.proto",
}
