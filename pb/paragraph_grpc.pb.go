// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: paragraph.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParagraphServiceClient is the client API for ParagraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParagraphServiceClient interface {
	Create(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*ParagraphResponse, error)
	CreateByKeyword(ctx context.Context, in *CreateParagraphByKeywordRequest, opts ...grpc.CallOption) (*ParagraphResponse, error)
	Update(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*ParagraphResponse, error)
	// Get
	GetById(ctx context.Context, in *ParagraphIdRequest, opts ...grpc.CallOption) (*ParagraphResponse, error)
	GetStream(ctx context.Context, in *ParagraphStringRequest, opts ...grpc.CallOption) (ParagraphService_GetStreamClient, error)
}

type paragraphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParagraphServiceClient(cc grpc.ClientConnInterface) ParagraphServiceClient {
	return &paragraphServiceClient{cc}
}

func (c *paragraphServiceClient) Create(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*ParagraphResponse, error) {
	out := new(ParagraphResponse)
	err := c.cc.Invoke(ctx, "/paragraph.ParagraphService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paragraphServiceClient) CreateByKeyword(ctx context.Context, in *CreateParagraphByKeywordRequest, opts ...grpc.CallOption) (*ParagraphResponse, error) {
	out := new(ParagraphResponse)
	err := c.cc.Invoke(ctx, "/paragraph.ParagraphService/CreateByKeyword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paragraphServiceClient) Update(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*ParagraphResponse, error) {
	out := new(ParagraphResponse)
	err := c.cc.Invoke(ctx, "/paragraph.ParagraphService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paragraphServiceClient) GetById(ctx context.Context, in *ParagraphIdRequest, opts ...grpc.CallOption) (*ParagraphResponse, error) {
	out := new(ParagraphResponse)
	err := c.cc.Invoke(ctx, "/paragraph.ParagraphService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paragraphServiceClient) GetStream(ctx context.Context, in *ParagraphStringRequest, opts ...grpc.CallOption) (ParagraphService_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ParagraphService_ServiceDesc.Streams[0], "/paragraph.ParagraphService/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &paragraphServiceGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ParagraphService_GetStreamClient interface {
	Recv() (*ParagraphResponse, error)
	grpc.ClientStream
}

type paragraphServiceGetStreamClient struct {
	grpc.ClientStream
}

func (x *paragraphServiceGetStreamClient) Recv() (*ParagraphResponse, error) {
	m := new(ParagraphResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ParagraphServiceServer is the server API for ParagraphService service.
// All implementations should embed UnimplementedParagraphServiceServer
// for forward compatibility
type ParagraphServiceServer interface {
	Create(context.Context, *Paragraph) (*ParagraphResponse, error)
	CreateByKeyword(context.Context, *CreateParagraphByKeywordRequest) (*ParagraphResponse, error)
	Update(context.Context, *Paragraph) (*ParagraphResponse, error)
	// Get
	GetById(context.Context, *ParagraphIdRequest) (*ParagraphResponse, error)
	GetStream(*ParagraphStringRequest, ParagraphService_GetStreamServer) error
}

// UnimplementedParagraphServiceServer should be embedded to have forward compatible implementations.
type UnimplementedParagraphServiceServer struct {
}

func (UnimplementedParagraphServiceServer) Create(context.Context, *Paragraph) (*ParagraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedParagraphServiceServer) CreateByKeyword(context.Context, *CreateParagraphByKeywordRequest) (*ParagraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateByKeyword not implemented")
}
func (UnimplementedParagraphServiceServer) Update(context.Context, *Paragraph) (*ParagraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedParagraphServiceServer) GetById(context.Context, *ParagraphIdRequest) (*ParagraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedParagraphServiceServer) GetStream(*ParagraphStringRequest, ParagraphService_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}

// UnsafeParagraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParagraphServiceServer will
// result in compilation errors.
type UnsafeParagraphServiceServer interface {
	mustEmbedUnimplementedParagraphServiceServer()
}

func RegisterParagraphServiceServer(s grpc.ServiceRegistrar, srv ParagraphServiceServer) {
	s.RegisterService(&ParagraphService_ServiceDesc, srv)
}

func _ParagraphService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paragraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParagraphServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paragraph.ParagraphService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParagraphServiceServer).Create(ctx, req.(*Paragraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParagraphService_CreateByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParagraphByKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParagraphServiceServer).CreateByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paragraph.ParagraphService/CreateByKeyword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParagraphServiceServer).CreateByKeyword(ctx, req.(*CreateParagraphByKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParagraphService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paragraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParagraphServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paragraph.ParagraphService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParagraphServiceServer).Update(ctx, req.(*Paragraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParagraphService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParagraphIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParagraphServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paragraph.ParagraphService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParagraphServiceServer).GetById(ctx, req.(*ParagraphIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParagraphService_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ParagraphStringRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ParagraphServiceServer).GetStream(m, &paragraphServiceGetStreamServer{stream})
}

type ParagraphService_GetStreamServer interface {
	Send(*ParagraphResponse) error
	grpc.ServerStream
}

type paragraphServiceGetStreamServer struct {
	grpc.ServerStream
}

func (x *paragraphServiceGetStreamServer) Send(m *ParagraphResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ParagraphService_ServiceDesc is the grpc.ServiceDesc for ParagraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParagraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paragraph.ParagraphService",
	HandlerType: (*ParagraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ParagraphService_Create_Handler,
		},
		{
			MethodName: "CreateByKeyword",
			Handler:    _ParagraphService_CreateByKeyword_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ParagraphService_Update_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ParagraphService_GetById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _ParagraphService_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "paragraph.proto",
}
